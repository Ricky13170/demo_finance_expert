"""
Stock Agent - Agent tra c·ª©u gi√° c·ªï phi·∫øu

Nhi·ªám v·ª•:
- Tr√≠ch xu·∫•t m√£ c·ªï phi·∫øu t·ª´ c√¢u h·ªèi ng∆∞·ªùi d√πng
- L·∫•y gi√° c·ªï phi·∫øu t·ª´ vnstock API
- Tr·∫£ v·ªÅ th√¥ng tin gi√° c·ªï phi·∫øu theo ƒë·ªãnh d·∫°ng d·ªÖ ƒë·ªçc
"""
import re
from vnstock import Listing, Vnstock
from datetime import datetime, timedelta


class StockAgent:
    """
    Agent chuy√™n tra c·ª©u gi√° c·ªï phi·∫øu Vi·ªát Nam
    
    Ch·ª©c nƒÉng:
    - T√¨m m√£ c·ªï phi·∫øu trong c√¢u h·ªèi ng∆∞·ªùi d√πng
    - L·∫•y gi√° c·ªï phi·∫øu t·ª´ vnstock API
    - Hi·ªÉn th·ªã th√¥ng tin gi√° theo ƒë·ªãnh d·∫°ng d·ªÖ ƒë·ªçc
    """
    
    def __init__(self):
        """Kh·ªüi t·∫°o StockAgent"""
        # Load danh s√°ch m√£ c·ªï phi·∫øu h·ª£p l·ªá t·ª´ VN exchange
        self.valid_symbols = self._load_symbols()
    
    def _load_symbols(self) -> list:
        """Load danh s√°ch m√£ c·ªï phi·∫øu h·ª£p l·ªá t·ª´ VN exchange"""
        try:
            listing = Listing()
            df = listing.all_symbols()
            tickers = df["symbol"].dropna().unique().tolist()
            print(f"[StockAgent] ƒê√£ load {len(tickers)} m√£ c·ªï phi·∫øu h·ª£p l·ªá")
            return tickers
        except Exception as e:
            print(f"[WARN] Kh√¥ng th·ªÉ load danh s√°ch m√£ c·ªï phi·∫øu: {e}")
            return []
    
    def extract_symbol(self, query: str) -> str:
        """
        T√¨m m√£ c·ªï phi·∫øu trong c√¢u h·ªèi ng∆∞·ªùi d√πng
        
        V√≠ d·ª•: "Gi√° c·ªï phi·∫øu FPT h√¥m nay" ‚Üí "FPT"
        """
        query_upper = query.upper()
        # T√¨m c√°c chu·ªói ch·ªØ hoa c√≥ 3-5 k√Ω t·ª± (m√£ c·ªï phi·∫øu)
        candidates = re.findall(r"\b[A-Z]{3,5}\b", query_upper)
        
        # L·ªçc c√°c m√£ h·ª£p l·ªá
        valid = [c for c in candidates if c in self.valid_symbols] if self.valid_symbols else candidates
        
        if not valid:
            return None
        
        # ∆Øu ti√™n m√£ xu·∫•t hi·ªán sau t·ª´ kh√≥a nh∆∞ "c·ªßa", "m√£", "c·ªï phi·∫øu"
        keywords = ["VE", "CUA", "MA", "CO PHIEU", "ABOUT", "OF", "SYMBOL", "STOCK"]
        for kw in keywords:
            for v in valid:
                pattern = rf"{kw}\s+{v}\b"
                if re.search(pattern, query_upper):
                    return v
        
        # N·∫øu kh√¥ng t√¨m th·∫•y theo context, tr·∫£ v·ªÅ m√£ cu·ªëi c√πng (th∆∞·ªùng l√† m√£ th·ª±c)
        return valid[-1]
    
    def handle_request(self, query: str) -> str:
        """
        X·ª≠ l√Ω y√™u c·∫ßu tra c·ª©u gi√° c·ªï phi·∫øu
        
        Args:
            query: C√¢u h·ªèi ng∆∞·ªùi d√πng (v√≠ d·ª•: "Gi√° FPT h√¥m nay")
            
        Returns:
            Th√¥ng tin gi√° c·ªï phi·∫øu ho·∫∑c th√¥ng b√°o l·ªói
        """
        # T√¨m m√£ c·ªï phi·∫øu trong c√¢u h·ªèi
        symbol = self.extract_symbol(query)
        if not symbol:
            return "Vui l√≤ng cung c·∫•p m√£ c·ªï phi·∫øu h·ª£p l·ªá (v√≠ d·ª•: FPT, VNM, HPG, MWG, ...)."
        
        try:
            # Kh·ªüi t·∫°o vnstock v√† l·∫•y d·ªØ li·ªáu
            vnstock = Vnstock()
            stock_obj = vnstock.stock(symbol=symbol, source='VCI')
            
            # L·∫•y gi√° hi·ªán t·∫°i
            quote = stock_obj.quote()
            if quote is None or quote.empty:
                return f"Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho m√£ {symbol}."
            
            # L·∫•y th√¥ng tin t·ª´ quote
            current_price = float(quote.iloc[-1]['close']) if not quote.empty else 0
            change = float(quote.iloc[-1]['change']) if 'change' in quote.columns else 0
            change_percent = float(quote.iloc[-1]['pctChange']) if 'pctChange' in quote.columns else 0
            
            # Format k·∫øt qu·∫£
            result = f"üìä GI√Å C·ªî PHI·∫æU {symbol}\n"
            result += f"{'='*40}\n"
            result += f"Gi√° hi·ªán t·∫°i: {current_price:,.0f} VND\n"
            result += f"Thay ƒë·ªïi: {change:+,.0f} VND ({change_percent:+.2f}%)\n"
            
            # Th√™m th√¥ng tin volume n·∫øu c√≥
            if 'volume' in quote.columns:
                volume = float(quote.iloc[-1]['volume'])
                result += f"Kh·ªëi l∆∞·ª£ng: {volume:,.0f}\n"
            
            return result
            
        except Exception as e:
            print(f"[ERROR] L·ªói khi l·∫•y gi√° c·ªï phi·∫øu {symbol}: {e}")
            return f"L·ªói khi tra c·ª©u gi√° c·ªï phi·∫øu {symbol}. Vui l√≤ng th·ª≠ l·∫°i sau."

