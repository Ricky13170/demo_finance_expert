import os
import asyncio
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from orchestrator.orchestrator_agent import OrchestratorAgent


# ‚úÖ D√πng model Groq Llama m·ªõi nh·∫•t (ƒë√£ test ho·∫°t ƒë·ªông)
DEFAULT_MODEL = "meta-llama/llama-4-scout-17b-16e-instruct"

# Kh·ªüi t·∫°o Orchestrator (ƒë√£ h·ªó tr·ª£ Groq API)
orchestrator = OrchestratorAgent(model_name=DEFAULT_MODEL)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ü§ñ Xin ch√†o! M√¨nh l√† Tr·ª£ l√Ω T√†i ch√≠nh amazingtech. "
        "B·∫°n c√≥ th·ªÉ h·ªèi m√¨nh v·ªÅ gi√° c·ªï phi·∫øu, ph√¢n t√≠ch ho·∫∑c t∆∞ v·∫•n ƒë·∫ßu t∆∞ nh√©!"
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text.strip()
    response = await orchestrator.handle_query(user_message, user_id=str(update.effective_user.id))
    await update.message.reply_text(response)


def main():
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        print("‚ùå Ch∆∞a c√≥ TELEGRAM_BOT_TOKEN trong .env")
        return

    print(f"üöÄ Bot t√†i ch√≠nh kh·ªüi ƒë·ªông (Groq model: {DEFAULT_MODEL})...")
    app = ApplicationBuilder().token(token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.run_polling()


if __name__ == "__main__":
    main()
