import os
import asyncio
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from orchestrator.orchestrator_agent import OrchestratorAgent

DEFAULT_MODEL = "meta-llama/llama-4-scout-17b-16e-instruct"


def get_orchestrator(context: ContextTypes.DEFAULT_TYPE) -> OrchestratorAgent:
    """L·∫•y Orchestrator t·ª´ context.bot_data (n·∫øu ch∆∞a c√≥ th√¨ kh·ªüi t·∫°o)."""
    if "orchestrator" not in context.bot_data:
        context.bot_data["orchestrator"] = OrchestratorAgent(model_name=DEFAULT_MODEL)
        print("‚úÖ OrchestratorAgent ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o trong bot_data")
    return context.bot_data["orchestrator"]


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ü§ñ Xin ch√†o! M√¨nh l√† Tr·ª£ l√Ω T√†i ch√≠nh amazingtech.\n"
        "B·∫°n c√≥ th·ªÉ h·ªèi m√¨nh v·ªÅ gi√° c·ªï phi·∫øu, tin t·ª©c, ho·∫∑c t∆∞ v·∫•n ƒë·∫ßu t∆∞ nh√©! üíπ"
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """X·ª≠ l√Ω tin nh·∫Øn ng∆∞·ªùi d√πng g·ª≠i ƒë·∫øn bot."""
    orchestrator = get_orchestrator(context)
    user_message = update.message.text.strip()
    user_id = str(update.effective_user.id)

    try:
        response = await orchestrator.handle_query(user_message, user_id=user_id)

        if len(response) > 4000:
            response = response[:4000] + "\n\n[‚ö†Ô∏è Tin nh·∫Øn b·ªã c·∫Øt b·ªõt do gi·ªõi h·∫°n Telegram]"

        await update.message.reply_text(response)

    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è L·ªói x·ª≠ l√Ω y√™u c·∫ßu: {e}")
        print("‚ùå L·ªói trong handle_message:", e)


def main():
    load_dotenv()

    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        print("‚ùå Ch∆∞a c√≥ TELEGRAM_BOT_TOKEN trong .env")
        return

    print(f"üöÄ Bot t√†i ch√≠nh kh·ªüi ƒë·ªông (Groq model: {DEFAULT_MODEL})...")

    app = ApplicationBuilder().token(token).build()

    # Th√™m handler
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.run_polling(stop_signals=None)


if __name__ == "__main__":
    if os.name == "nt":
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
    main()
