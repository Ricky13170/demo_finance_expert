import os
import asyncio
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from orchestrator.orchestrator_agent import OrchestratorAgent

DEFAULT_MODEL = "meta-llama/llama-4-scout-17b-16e-instruct"


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ü§ñ Xin ch√†o! M√¨nh l√† Tr·ª£ l√Ω T√†i ch√≠nh amazingtech. "
        "B·∫°n c√≥ th·ªÉ h·ªèi m√¨nh v·ªÅ gi√° c·ªï phi·∫øu, ph√¢n t√≠ch ho·∫∑c t∆∞ v·∫•n ƒë·∫ßu t∆∞ nh√©!"
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    orchestrator: OrchestratorAgent = context.bot_data["orchestrator"]
    user_message = update.message.text.strip()

    response = await orchestrator.handle_query(
        user_message,
        user_id=str(update.effective_user.id)
    )

    if len(response) > 4000:
        response = response[:4000] + "\n\n[‚ö†Ô∏è Tin nh·∫Øn b·ªã c·∫Øt b·ªõt do gi·ªõi h·∫°n Telegram]"

    await update.message.reply_text(response)


def main():
    load_dotenv()

    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        print("‚ùå Ch∆∞a c√≥ TELEGRAM_BOT_TOKEN trong .env")
        return

    print(f"üöÄ Bot t√†i ch√≠nh kh·ªüi ƒë·ªông (Groq model: {DEFAULT_MODEL})...")

    # T·∫°o app Telegram
    app = ApplicationBuilder().token(token).build()

    orchestrator = OrchestratorAgent(model_name=DEFAULT_MODEL)
    app.bot_data["orchestrator"] = orchestrator

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # B·∫Øt ƒë·∫ßu polling (ƒë·ªìng b·ªô event loop ch√≠nh x√°c)
    app.run_polling(stop_signals=None)


if __name__ == "__main__":
    # Fix cho Windows n·∫øu c·∫ßn
    if os.name == "nt":
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
    main()
